syntax = "proto3";

package org.couchers.api.events;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

service Events {
  // This is a secure service: a user needs to be authenticated and not jailed to call functions here, refer to auth.proto and jail.proto

  rpc CreateEvent(CreateEventReq) returns (Event) {
    // Creates an event, only one instance, add more with ScheduleEvent
  }

  rpc ScheduleEvent(ScheduleEventReq) returns (Event) {
    // Schedules a new occurence for an event that already exists
  }

  rpc UpdateEvent(UpdateEventReq) returns (Event) {
    // Edit an event
  }

  rpc GetEvent(GetEventReq) returns (Event) {
    // Gets an event
  }

  rpc ListEventAttendees(ListEventAttendeesReq) returns (ListEventAttendeesRes) {
    // Paginated list of event attendees
  }

  rpc ListEventSubscribers(ListEventSubscribersReq) returns (ListEventSubscribersRes) {
    // Paginated list of event subscribers
  }

  rpc ListEventOrganizers(ListEventOrganizersReq) returns (ListEventOrganizersRes) {
    // Paginated list of event organizers
  }

  rpc TransferEvent(TransferEventReq) returns (Event) {
    // Transfer an event you own to either a group or a community
  }

  rpc SetEventSubscription(SetEventSubscriptionReq) returns (Event) {
    // Subscribe to get notifications about all occurences of an event
  }

  rpc SetEventAttendance(SetEventAttendanceReq) returns (Event) {
    // RSVP/change going status for an occurence of an event
  }

  rpc ListEvents(ListEventsReq) returns (ListEventsRes) {
    // TODO: ListEvents/SearchEvents/etc
    // TODO: what is this??
  }

  // TODO: InviteToEvent/SendEventInvite
  // TODO: InviteEventOrganizer/edit/remove?/SetEventOrganizer
  // TODO: ListSubscribedEvents
  // TODO: ListAttendingEvents
  // TODO: ListEventSiblings?
  // TODO: DownloadCalendarInvite
  // TODO: ...
}

message Coordinate {
  double lat = 1;
  double lng = 2;
}

enum AttendanceState {
  ATTENDANCE_STATE_NOT_GOING = 0;
  ATTENDANCE_STATE_MAYBE = 1;
  ATTENDANCE_STATE_GOING = 2;
}

message Event {
  int64 event_id = 1; // = occurence_id
  // it's the next event occurence
  bool is_next = 2;
  // already happened
  bool is_past = 3;
  // in the future
  bool is_future = 4;

  string title = 5;
  // a short URL fragment generated from the name, e.g. "New York City: weekly meetup" might become "new-york-city-weekly-meetup"
  string slug = 6;
  string content = 7;  // CommonMark without images
  // empty string if no photo
  string photo_url = 8;
  string is_online_only = 9;
  // videoconferencing link, etc
  string link = 10;
  // empty iff online
  Coordinate location = 11;
  string address = 12;

  google.protobuf.Timestamp created = 13;
  google.protobuf.Timestamp last_edited = 14;
  int64 creator_user_id = 15;

  // the UTC timestamps of start and end times
  google.protobuf.Timestamp start_time = 16;
  google.protobuf.Timestamp end_time = 17;

  // the tzdata timezone identified
  string timezone = 18;

  // the start/end times as localized strings (according to the above timezone)
  string start_time_display = 19;
  string end_time_display = 20;

  // the user's attendance state
  AttendanceState attendance_state = 21;
  // whether the current user is a subscriber/organizer to the event
  // subscribers get emails about stuff
  bool organizer = 22;
  bool subscriber = 23;

  uint32 going_count = 24;
  uint32 maybe_count = 25;
  uint32 organizer_count = 26;
  uint32 subscriber_count = 27;

  oneof owner {
    int64 owner_user_id = 28;
    int64 owner_community_id = 29;
    int64 owner_group_id = 30;
  }
  int64 thread_id = 31;

  bool can_edit = 32;
  bool can_moderate = 33;
}

message CreateEventReq {
  string title = 1;
  string content = 2;  // CommonMark without images
  // from media server
  string photo_key = 3;
  // in-person events must have address + location
  Coordinate location = 4;
  string address = 5;
  // online_only events have no address/location and require a link
  string is_online_only = 6;
  string link = 7;
  // must give this if is_online_only, if !is_online_only, this is auto-filled from the location
  int64 parent_community_id = 8;
  // timestamps are in UTC
  google.protobuf.Timestamp start_time = 9;
  google.protobuf.Timestamp end_time = 10;
  // the tzdata timezone identified, empty string means tz of creating user
  string timezone = 11;
}

message ScheduleEventReq {
  int64 event_id = 1;
  string content = 2;  // CommonMark without images
  // from media server
  string photo_key = 3;
  string is_online_only = 4;
  string link = 11;
  Coordinate location = 6;
  string address = 7;
  // timestamps are in UTC
  google.protobuf.Timestamp start_time = 8;
  google.protobuf.Timestamp end_time = 9;
  // the tzdata timezone identified, empty string means tz of creating user
  string timezone = 10;
}

message UpdateEventReq {
  int64 event_id = 1;
  // whether to update all future occurences or just this one
  bool update_all_future = 2;
  google.protobuf.StringValue title = 3;
  google.protobuf.StringValue content = 4;  // CommonMark without images
  // from media server, set to empty string to clear
  google.protobuf.StringValue photo_key = 5;
  // if setting is_online_only, need to give link, if setting to false, need to give location + address
  google.protobuf.BoolValue is_online_only = 6;
  google.protobuf.BoolValue link = 13;
  // we can detect lack of this sub-message and timestamps without *Value stuff, and location/times cannot be set to null
  Coordinate location = 7;
  google.protobuf.StringValue address = 8;
  google.protobuf.Timestamp start_time = 9;
  google.protobuf.Timestamp end_time = 10;
  // the tzdata timezone identified
  google.protobuf.StringValue timezone = 11;

  // whether to notify all attendees about the change
  // bool notify_attendees = 12;
}

message GetEventReq {
  int64 event_id = 1;
}

message ListEventAttendeesReq {
  int64 event_id = 1;

  uint32 page_size = 2;
  string page_token = 3;
}

message ListEventAttendeesRes {
  repeated int64 attendee_user_ids = 1;
}

message ListEventSubscribersReq {
  int64 event_id = 1;

  uint32 page_size = 2;
  string page_token = 3;
}

message ListEventSubscribersRes {
  repeated int64 subscriber_user_ids = 1;
}

message ListEventOrganizersReq {
  int64 event_id = 1;

  uint32 page_size = 2;
  string page_token = 3;
}

message ListEventOrganizersRes {
  repeated int64 tOrganizer_user_ids = 1;
}

message ListEventsReq {
  int64 event_id = 1;

  uint32 page_size = 2;
  string page_token = 3;
}

message ListEventsRes {
  repeated Event events = 1;
}

message TransferEventReq {
  int64 event_id = 1;
  oneof new_owner {
    int64 new_owner_community_id = 3;
    int64 new_owner_group_id = 2;
  }
}

message SetEventSubscriptionReq {
  int64 event_id = 1;
  bool subscribe = 2;
}

message SetEventAttendanceReq {
  int64 event_id = 1;
  AttendanceState attendance_state = 2;
}
