"""Remove old events stuff

Revision ID: 55638524a932
Revises: 17362f602f12
Create Date: 2021-03-29 13:00:58.002000

"""
import geoalchemy2
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "55638524a932"
down_revision = "17362f602f12"
branch_labels = None
depends_on = None


def upgrade():
    op.drop_table("cluster_event_associations")
    op.drop_table("event_subscriptions")
    op.drop_table("events")


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "cluster_event_associations",
        sa.Column("id", sa.BIGINT(), autoincrement=True, nullable=False),
        sa.Column("event_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column("cluster_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["cluster_id"], ["clusters.id"], name="fk_cluster_event_associations_cluster_id_clusters"
        ),
        sa.ForeignKeyConstraint(["event_id"], ["events.id"], name="fk_cluster_event_associations_event_id_events"),
        sa.PrimaryKeyConstraint("id", name="pk_cluster_event_associations"),
        sa.UniqueConstraint("event_id", "cluster_id", name="uq_cluster_event_associations_event_id"),
    )
    op.create_index("ix_cluster_event_associations_event_id", "cluster_event_associations", ["event_id"], unique=False)
    op.create_index(
        "ix_cluster_event_associations_cluster_id", "cluster_event_associations", ["cluster_id"], unique=False
    )
    op.create_table(
        "events",
        sa.Column(
            "id",
            sa.BIGINT(),
            server_default=sa.text("nextval('communities_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("title", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("content", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("thread_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column(
            "geom",
            geoalchemy2.types.Geometry(geometry_type="POINT", srid=4326, from_text="ST_GeomFromEWKT", name="geometry"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("address", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("photo", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("start_time", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
        sa.Column("end_time", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
        sa.Column(
            "created",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("owner_user_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column("owner_cluster_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(["owner_cluster_id"], ["clusters.id"], name="fk_events_owner_cluster_id_clusters"),
        sa.ForeignKeyConstraint(["owner_user_id"], ["users.id"], name="fk_events_owner_user_id_users"),
        sa.ForeignKeyConstraint(["thread_id"], ["threads.id"], name="fk_events_thread_id_threads"),
        sa.PrimaryKeyConstraint("id", name="pk_events"),
        sa.UniqueConstraint("thread_id", name="uq_events_thread_id"),
        postgresql_ignore_search_path=False,
    )
    op.create_index("ix_events_owner_user_id", "events", ["owner_user_id"], unique=False)
    op.create_index("ix_events_owner_cluster_id", "events", ["owner_cluster_id"], unique=True)
    op.create_index("idx_events_geom", "events", ["geom"], unique=False)
    op.create_table(
        "event_subscriptions",
        sa.Column("id", sa.BIGINT(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column("event_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column(
            "joined",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["event_id"], ["events.id"], name="fk_event_subscriptions_event_id_events"),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], name="fk_event_subscriptions_user_id_users"),
        sa.PrimaryKeyConstraint("id", name="pk_event_subscriptions"),
        sa.UniqueConstraint("event_id", "user_id", name="uq_event_subscriptions_event_id"),
    )
    op.create_index("ix_event_subscriptions_user_id", "event_subscriptions", ["user_id"], unique=False)
    op.create_index("ix_event_subscriptions_event_id", "event_subscriptions", ["event_id"], unique=False)
    # ### end Alembic commands ###
